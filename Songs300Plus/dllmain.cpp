// dllmain.cpp : Defines the entry point for the DLL application.
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <vector>
//#include "toml.hpp"

void* addr = nullptr;

//toml::table cfg_file;
//bool cfg_mysetting = false;

void InjectCode(void* address, const std::vector<uint8_t> data)
{
    const size_t byteCount = data.size() * sizeof(uint8_t);

    DWORD oldProtect;
    VirtualProtect(address, byteCount, PAGE_EXECUTE_READWRITE, &oldProtect);
    memcpy(address, data.data(), byteCount);
    VirtualProtect(address, byteCount, oldProtect, nullptr);
}

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_PROCESS_DETACH:
        break;
	}

	return TRUE;
}

extern "C"
{
	__declspec(dllexport) void Init()
	{
        //1.02
        InjectCode((void*)0x140075C27, { 0xD9, 0xF3, 0x93, 0x01 });
        InjectCode((void*)0x140075C33, { 0x09, 0xFC, 0x29, 0x02 });
        InjectCode((void*)0x140075C3F, { 0xA1, 0xFD, 0x29, 0x02 });
        InjectCode((void*)0x1401D5246, { 0xD0, 0x07 });
        InjectCode((void*)0x1401D53DF, { 0xD0, 0x07 });
        InjectCode((void*)0x1401D5B5A, { 0xD0, 0x07 });
        InjectCode((void*)0x1401D64E3, { 0x55, 0xF3, 0x13, 0x02 });
        InjectCode((void*)0x1401D64F2, { 0x46, 0xF3, 0x13, 0x02 });
        InjectCode((void*)0x1401D6503, { 0xFD, 0xEA, 0x7D, 0x01 });
        InjectCode((void*)0x1401D6513, { 0x91, 0xF2, 0x13, 0x02 });
        InjectCode((void*)0x1401D6523, { 0xC1, 0xF2, 0x13, 0x02 });
        InjectCode((void*)0x1401D6533, { 0xD1, 0xF2, 0x13, 0x02 });
        InjectCode((void*)0x1401D6543, { 0xC1, 0xF2, 0x13, 0x02 });
        InjectCode((void*)0x1401D6553, { 0xC1, 0xF2, 0x13, 0x02 });
        InjectCode((void*)0x1401D6583, { 0xB9, 0xF2, 0x13, 0x02 });
        InjectCode((void*)0x1401D6593, { 0x4D, 0xF3, 0x13, 0x02 });
        InjectCode((void*)0x1401D6623, { 0xC5, 0xF3, 0x13, 0x02 });
        InjectCode((void*)0x1401D6633, { 0xC9, 0xF1, 0x13, 0x02 });
        InjectCode((void*)0x1401D800E, { 0x04, 0x0A, 0x96 });
        InjectCode((void*)0x1401D8044, { 0x04, 0x0A, 0x96 });
        InjectCode((void*)0x1401D810F, { 0xFC, 0x08, 0x99 });
        InjectCode((void*)0x1401D81AA, { 0xBC, 0x07, 0x99 });
        InjectCode((void*)0x1401D8258, { 0xFC, 0x08, 0x99 });
        InjectCode((void*)0x1401D837C, { 0x04, 0x0A, 0x96 });
        InjectCode((void*)0x1401D843F, { 0x04, 0x0A, 0x96 });
        InjectCode((void*)0x1401D8874, { 0xBC, 0x07, 0x99 });
        InjectCode((void*)0x1401D891B, { 0xFC, 0x08, 0x99 });
        InjectCode((void*)0x1401D8B32, { 0xF9, 0x08, 0x99 });
        InjectCode((void*)0x1401D8B54, { 0xFC, 0x08, 0x99 });
        InjectCode((void*)0x1401D8B79, { 0xF8, 0x08, 0x99 });
        InjectCode((void*)0x1401D8B94, { 0x04, 0x09, 0x99 });
        InjectCode((void*)0x1401D8BDD, { 0xF9, 0x08, 0x99 });
        InjectCode((void*)0x1401D8CFB, { 0x01, 0xC3, 0x7D, 0x01 });
        InjectCode((void*)0x1401D8D23, { 0x04, 0x09, 0x99 });
        InjectCode((void*)0x1401D8D65, { 0x97, 0xC2, 0x7D, 0x01 });
        InjectCode((void*)0x1401D8D82, { 0x48, 0x08, 0x96 });
        InjectCode((void*)0x1401D8D8E, { 0xEC, 0x09, 0x96 });
        InjectCode((void*)0x1401D8D9A, { 0xBC, 0x07, 0x99 });
        InjectCode((void*)0x1401D8DB9, { 0xF8, 0x08, 0x99 });
        InjectCode((void*)0x1401D8DBF, { 0xF9, 0x08, 0x99 });
        InjectCode((void*)0x1401D8DC7, { 0xFC, 0x08, 0x99 });
        InjectCode((void*)0x1401D8DD2, { 0x04, 0x0A, 0x96 });
        InjectCode((void*)0x1401D93DB, { 0xF9, 0x08, 0x99 });
        InjectCode((void*)0x1401D9436, { 0x04, 0x09, 0x99 });
        InjectCode((void*)0x14064C832, { 0x90, 0x90, 0x90, 0x90, 0x90 });
        InjectCode((void*)0x140C81930, { 0x44, 0x49, 0x56, 0x41 });
        InjectCode((void*)0x14E419086, { 0xD0, 0x07 });
        InjectCode((void*)0x14E4190A1, { 0xD0, 0x07 });
        InjectCode((void*)0x14E420610, { 0xD0, 0x07 });
        InjectCode((void*)0x14E60982D, { 0xD3, 0xB7, 0x3A, 0xF3 });
        InjectCode((void*)0x14E609833, { 0xC9, 0xB7, 0x3A, 0xF3 });
        InjectCode((void*)0x14E609839, { 0xC6, 0xC1, 0xD0, 0xF3 });
        InjectCode((void*)0x14E609846, { 0x5E, 0xBF, 0xD0, 0xF3 });
        InjectCode((void*)0x14E609852, { 0x92, 0xBF, 0xD0, 0xF3 });
        InjectCode((void*)0x14E60985E, { 0x9E, 0xBF, 0xD0, 0xF3 });
        InjectCode((void*)0x14E60986A, { 0x9A, 0xBF, 0xD0, 0xF3 });
        InjectCode((void*)0x14E609876, { 0x9E, 0xBF, 0xD0, 0xF3 });
        InjectCode((void*)0x14E609889, { 0xAE, 0xBF, 0xD0, 0xF3 });
        InjectCode((void*)0x14E609891, { 0xAB, 0xBF, 0xD0, 0xF3 });
        InjectCode((void*)0x14E60989D, { 0x43, 0xC0, 0xD0, 0xF3 });
        InjectCode((void*)0x14E6098A9, { 0x3F, 0xC0, 0xD0, 0xF3 });
        InjectCode((void*)0x14E6098B5, { 0x3F, 0xC1, 0xD0, 0xF3 });
        InjectCode((void*)0x14E612D45, { 0xFC, 0x08, 0x99 });
        InjectCode((void*)0x14E612D53, { 0xBC, 0x07, 0x99 });
        InjectCode((void*)0x14E612DEB, { 0xFC, 0x08, 0x99 });
        //InjectCode((void*)0x14E612E18, { 0x04, 0x0A, 0x96 }); //was removed
        InjectCode((void*)0x14E612E0C, { 0xF0, 0x21, 0x3A, 0xF3 });
	}
}